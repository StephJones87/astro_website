---
import Icon from './Icon.astro';
import ThemeToggle from './ThemeToggle.astro';
import type { iconPaths } from './IconPaths';

const textLinks: { label: string; href: string }[] = [
	{ label: 'Home', href: '/' },
	{ label: 'Communities', href: '/communities/' },
	{ label: 'Resources', href: '/resources/' },
	{ label: 'Blog', href: '/blog/' },
	{ label: 'Work', href: '/work/' },
	{ label: 'About', href: '/about/' },
];

const iconLinks: { label: string; href: string; icon: keyof typeof iconPaths }[] = [
	{ label: 'Twitter', href: 'https://twitter.com/me', icon: 'twitter-logo' },
	{ label: 'Twitch', href: 'https://twitch.tv/me', icon: 'twitch-logo' },
	{ label: 'GitHub', href: 'https://github.com/me', icon: 'github-logo' },
	{ label: 'CodePen', href: 'https://codepen.io/me', icon: 'codepen-logo' },
	{ label: 'dribbble', href: 'https://dribbble.com/me', icon: 'dribbble-logo' },
	{ label: 'YouTube', href: 'https://www.youtube.com/@me/', icon: 'youtube-logo' },
];

const isCurrentPage = (href: string) => {
	let pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
	if (pathname.at(0) !== '/') pathname = '/' + pathname;
	if (pathname.at(-1) !== '/') pathname += '/';
	return pathname === href || (href !== '/' && pathname.startsWith(href));
};
---

<nav class="nav">
	<a href="/" class="site-title">
		<img src="/assets/logo.png" alt="Coding with Steph logo" class="site-logo" />
	</a>

	<ul class="nav-items">
		{
			textLinks.map(({ label, href }) => (
				<li>
					<a
						href={href}
						class="link"
						aria-current={isCurrentPage(href) ? 'page' : null}
					>
						{label}
					</a>
				</li>
			))
		}
	</ul>

	<div class="menu-footer">
		<div class="socials">
			{
				iconLinks.map(({ href, icon, label }) => (
					<a href={href} class="social" aria-label={label}>
						<span class="sr-only">{label}</span>
						<Icon icon={icon} />
					</a>
				))
			}
		</div>
		<div class="theme-toggle">
			<ThemeToggle />
		</div>
	</div>
</nav>

<style>
	.nav {
		display: grid;
		grid-template-columns: auto 1fr auto;
		align-items: center;
		padding: 2.5rem 5rem;
		gap: 1rem;
		font-family: var(--font-brand);
		font-weight: 500;
		position: relative;
		z-index: 999;
	}

	.site-title {
		display: flex;
		align-items: center;
		text-decoration: none;
	}

	.site-logo {
		height: 4rem;
		width: auto;
		object-fit: contain;
	}

	.nav-items {
		display: flex;
		gap: 1rem;
		background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
		border-radius: 999rem;
		padding: 0.5rem 0.75rem;
		box-shadow: var(--shadow-md);
		list-style: none;
		position: relative;
	}

	.nav-items::before {
		content: '';
		position: absolute;
		inset: -1px;
		background: var(--gradient-stroke);
		border-radius: 999rem;
		z-index: -1;
	}

	.link {
		display: inline-block;
		padding: 0.5rem 1rem;
		border-radius: 999rem;
		color: var(--gray-300);
		text-decoration: none;
		transition:
			color var(--theme-transition),
			background-color var(--theme-transition);
	}

	.link:hover,
	.link:focus {
		color: var(--gray-100);
		background-color: var(--accent-subtle-overlay);
	}

	.link[aria-current='page'] {
		color: var(--accent-text-over);
		background-color: var(--accent-regular);
	}

	.menu-footer {
		display: flex;
		justify-self: flex-end;
		align-items: center;
		gap: 1rem;
	}

	.socials {
		display: flex;
		gap: 0.5rem;
		font-size: var(--text-xl);
	}

	.social {
		color: var(--accent-dark);
		transition: color var(--theme-transition);
	}

	.social:hover,
	.social:focus {
		color: var(--accent-text-over);
	}

	.theme-toggle {
		display: flex;
		align-items: center;
	}
</style>
